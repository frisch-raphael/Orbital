@using Shared.Enums
@using Shared.Dtos
@using Ui.Pocos

<MatDialog IsOpenChanged="@IsSpellDialogOpenChanged" IsOpen="IsSpellDialogOpen">
    <MatDialogTitle>Configure @SpellToLaunch?.Title</MatDialogTitle>
    <MatDialogContent>

        @if (SpellToLaunch?.ConfigurationNeeded.Contains(Enums.SpellConfiguration.AntivirusToUse) == true)
        {
            <MatH6>Choose the antivirus</MatH6>
            <MatSelectItem @bind-Value="ChosenAntivirus" Items="@Antiviruses" Label="Antivirus">
            </MatSelectItem>
        }
        @if (SpellToLaunch?.ConfigurationNeeded.Contains(Enums.SpellConfiguration.FunctionsToScan) == true)
        {
            <MatH6>Choose the functions to scan</MatH6>
        <FilesConfigure UpdateFunctionIds="(ids) => SelectedFunctionIds = ids" SelectedPayload="SelectedPayload"></FilesConfigure>
        }

    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@LaunchScan">Launch</MatButton>
    </MatDialogActions>
</MatDialog>

<style>



</style>

@code {
    [Parameter]
    public Payload SelectedPayload { get; set; }

    [Parameter]
    public bool IsSpellDialogOpen { get; set; }

    public SupportedAntivirus ChosenAntivirus { get; set; }

    [Parameter]
    public OrbitalScan SpellToLaunch { get; set; }

    [Parameter]
    public EventCallback<bool> OnIsSpellOpenChanged { get; set; }

    [Parameter]
    public EventCallback<LaunchSpellConfiguration> OnConfigured { get; set; }

    public List<int> SelectedFunctionIds { get; set; }

    public List<SupportedAntivirus> Antiviruses { get; set; }
        = Enum.GetValues(typeof(SupportedAntivirus)).Cast<SupportedAntivirus>().ToList();

    private async Task LaunchScan()
    {
        await OnConfigured.InvokeAsync(new LaunchSpellConfiguration()
        {
            Antiviruses = new List<SupportedAntivirus>() { ChosenAntivirus }, 
            FunctionIds = SelectedFunctionIds
        });
    }

    private async Task IsSpellDialogOpenChanged(bool isSpellDialogOpen)
    {
        await OnIsSpellOpenChanged.InvokeAsync(isSpellDialogOpen);
    }

}


