@using Shared.Dtos
@using Shared.Enums
@using Shared.Static
@using Ui.Enums
@using Ui.Services

<MatDialog IsOpenChanged="@IsSpellsDialogOpenChanged" IsOpen="IsSpellsDialogOpen">
    <MatDialogTitle>@SpellType.Scan.ToString()</MatDialogTitle>
    <MatDialogContent>
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                @foreach (var spell in OrbitalScans)
                {
                    <div class="mat-layout-grid-cell spell">
                        <BaseCard Title="@spell.Title" ImageUrl="@spell.Image">
                            <ChildContent>
                                @spell.Description
                            </ChildContent>
                            <Actions>
                                <MatButton OnClick="@(async e => { await SpellChosen(spell); })">Launch</MatButton>
                            </Actions>
                        </BaseCard>
                    </div>
                }
            </div>
        </div>

    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { CloseSpellsDialog.InvokeAsync(); })">Close</MatButton>
    </MatDialogActions>
</MatDialog>
<SpellConfigureDialog 
    SpellToLaunch="SelectedOrbitalScan" 
    IsSpellDialogOpen="IsSpellDialogOpen" 
    OnConfigured="@LaunchSpell"
    OnIsSpellOpenChanged="@UpdateIsSpellOpen"
    SelectedPayload="SelectedPayload">
</SpellConfigureDialog>


<style>
    .mdc-dialog__container {
        min-width: 90%;
    }

    .mdc-dialog .mdc-dialog__surface {
        background-color: white;
        max-height: 80%;
        max-width: none;
        min-width: 85%;
    }

    .spell {
        width: 30rem;
    }
</style>

@code {

    [Inject]
    private IMatToaster Toaster { get; set; }

    [Parameter]
    public EventCallback<bool> CloseSpellsDialog { get; set; }

    [Parameter]
    public bool IsSpellsDialogOpen { get; set; }

    public bool IsSpellDialogOpen { get; set; }

    [Parameter]
    public Payload SelectedPayload { get; set; }

    [Inject]
    private OrbitalHttpClient OrbitalHttpClient { get; set; }

    OrbitalScan SelectedOrbitalScan { get; set; }

    private readonly List<OrbitalScan> OrbitalScans = new()
    {
        new OrbitalScan
        {
            Title = "Simple Scan",
            Endpoint = "Scans",
            Description = "Scan a payload with a single antivirus",
            Image = "images/simple_scan.png",
            SupportedPayloads = Enum.GetValues(typeof(PayloadType)).Cast<PayloadType>().ToList(),
            ConfigurationNeeded = new List<SpellConfiguration> { SpellConfiguration.AntivirusToUse }
        },
        new OrbitalScan
        {
            Title = "Scan all",
            Endpoint = "Scans",
            Description = "Scan a payload with every supported antiviruses",
            Image = "images/offline_virustotal.png",
            SupportedPayloads = Enum.GetValues(typeof(PayloadType)).Cast<PayloadType>().ToList()
        },
        new OrbitalScan
        {
            Title = "Dissect",
            Endpoint = "Dissect",
            Description = "Statically analyze every functions of a payload separately, and returns which ones are flagged, and which ones are healthy",
            Image = "images/dissect.png",
            SupportedPayloads = new List<PayloadType> { PayloadType.NativeExecutable, PayloadType.NativeLibrary },
            ConfigurationNeeded = new List<SpellConfiguration> { SpellConfiguration.AntivirusToUse, SpellConfiguration.FilesFromPayloadToScan }
        },
        new OrbitalScan
        {
            Title = "Dissect",
            Endpoint = "Dissect",
            Description = "Statically analyze every functions of a payload separately, and returns which ones are flagged, and which ones are healthy",
            Image = "images/dissect.png"
        }
    };

    private void IsSpellsDialogOpenChanged(bool isSpellsDialogOpen)
    {
        IsSpellsDialogOpen = isSpellsDialogOpen;
        if (!IsSpellsDialogOpen) IsSpellDialogOpen = false;
    }

    private async Task SpellChosen(OrbitalScan orbitalScan)
    {
        SelectedOrbitalScan = orbitalScan;
        if (orbitalScan.ConfigurationNeeded.Count == 0)
        {
            await LaunchSpell(Enum
                .GetValues(typeof(SupportedAntivirus))
                .Cast<SupportedAntivirus>()
                .ToList());
        }
        else
        {
            IsSpellDialogOpen = true;
        }
    }


    private async Task LaunchSpell(List<SupportedAntivirus> antiviruses)
    {
        var orbitalClient = OrbitalHttpClient.Client;
        HttpResponseMessage response = new();
        var scanPost = new ScanPost
        {
            PayloadId = SelectedPayload.Id,
            Antiviruses = antiviruses
        };
        var endpoint = SelectedOrbitalScan.Endpoint;

        @*var test = JsonContent.Create(ScanPost);*@
        try
        {
            response = await orbitalClient.PostAsync(endpoint, JsonHelper.SerializeAsync(scanPost));
        }
        catch (Exception ex)
        {
            Toaster.Add(ex.Message, MatToastType.Danger);
        }

        if (!response.IsSuccessStatusCode)
        {
            await OrbitalHttpClient.ShowAndLogError(response);
        }
    }
    private void UpdateIsSpellOpen(bool isSpellDialOpen)
    {
        IsSpellDialogOpen = isSpellDialOpen;
    }

}
