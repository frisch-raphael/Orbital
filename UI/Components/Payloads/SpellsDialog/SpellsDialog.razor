@using Shared.Dtos
@using Shared.Enums
@using Shared.Static
@using Ui.Enums
@using Ui.Services
@using Ui.Static
@using Ui.Pocos

<MatDialog IsOpenChanged="@IsSpellsDialogOpenChanged" IsOpen="IsSpellsDialogOpen">
    <MatDialogTitle>@SpellType.Scan.ToString()</MatDialogTitle>
    <MatDialogContent>
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                @foreach (var spell in OrbitalScans)
                {
                    <div class="mat-layout-grid-cell spell">
                        <BaseCard Title="@spell.Title" ImageUrl="@spell.Image">
                            <ChildContent>
                                @spell.Description
                            </ChildContent>
                            <Actions>
                                <MatButton OnClick="@(async e => { await SpellChosen(spell); })">
                                    @GetActionButton(spell)
                                </MatButton>
                            </Actions>
                        </BaseCard>
                    </div>
                }
            </div>
        </div>

    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { CloseSpellsDialog.InvokeAsync(); })">Close</MatButton>
    </MatDialogActions>
</MatDialog>
<SpellConfigureDialog 
    SpellToLaunch="SelectedOrbitalScan" 
    IsSpellDialogOpen="IsSpellDialogOpen" 
    OnConfigured="@LaunchSpell"
    OnIsSpellOpenChanged="@UpdateIsSpellOpen"
    SelectedPayload="SelectedPayload">
</SpellConfigureDialog>


<style>
    .mdc-dialog__container {
        min-width: 90%;
    }

    .mdc-dialog .mdc-dialog__surface {
        background-color: white;
        max-height: 80%;
        max-width: none;
        min-width: 85%;
    }

    .spell {
        width: 30rem;
    }
</style>

@code {

    [Inject]
    private IMatToaster Toaster { get; set; }

    [Parameter]
    public EventCallback<bool> CloseSpellsDialog { get; set; }

    [Parameter]
    public bool IsSpellsDialogOpen { get; set; }

    public bool IsSpellDialogOpen { get; set; }

    [Parameter]
    public Payload SelectedPayload { get; set; }

    [Inject]
    private OrbitalHttpClient OrbitalHttpClient { get; set; }

    OrbitalScan SelectedOrbitalScan { get; set; }

    private string GetActionButton(OrbitalScan scan)
    {
        return scan.ConfigurationNeeded.Count == 0 ? "Launch" : "Configure";
    }

    private readonly List<OrbitalScan> OrbitalScans = ScanSpells.AllScanSpells;

    private void IsSpellsDialogOpenChanged(bool isSpellsDialogOpen)
    {
        IsSpellsDialogOpen = isSpellsDialogOpen;
        if (!IsSpellsDialogOpen) IsSpellDialogOpen = false;
    }

    private async Task SpellChosen(OrbitalScan orbitalScan)
    {
        SelectedOrbitalScan = orbitalScan;
        if (orbitalScan.ConfigurationNeeded.Count == 0)
        {
            var config = new LaunchSpellConfiguration()
            {
                Antiviruses = Enum
                    .GetValues(typeof(SupportedAntivirus))
                    .Cast<SupportedAntivirus>()
                    .ToList()
            };
            await LaunchSpell(config);
        }
        else
        {
            IsSpellDialogOpen = true;
        }
    }


    private async Task LaunchSpell(LaunchSpellConfiguration launchSpellConfiguration)
    {
        switch (SelectedOrbitalScan.ScanType)
        {
            case ScanType.ScanWithAll:
                // ScanType.ScanWithAll | ScanType.SimpleScan
            case ScanType.SimpleScan:
                var scanPost = new ScanPost
                {
                    PayloadId = SelectedPayload.Id,
                    Antiviruses = launchSpellConfiguration.Antiviruses
                };
                await OrbitalHttpClient.PostToOrbital(SelectedOrbitalScan.Endpoint, scanPost);
                break;
            case ScanType.Dissection:
                var dissectionPost = new DissectionPost
                {
                    FunctionIds = launchSpellConfiguration.FunctionIds,
                    SupportedAntivirus = launchSpellConfiguration.Antiviruses[0],
                    NumberOfDocker = launchSpellConfiguration.NumberOfDockers,
                    PayloadId = SelectedPayload.Id
                };
                await OrbitalHttpClient.PostToOrbital(SelectedOrbitalScan.Endpoint, dissectionPost);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private void UpdateIsSpellOpen(bool isSpellDialOpen)
    {
        IsSpellDialogOpen = isSpellDialOpen;
    }

}
