@using Newtonsoft.Json
@using Shared.Dtos
@using Shared.Enums
@using System.Net.Http.Json
@using System.Text
@using Shared.Static
@using Ui.Services
<MatDialog @bind-IsOpen="@IsSpellsDialogOpen">
    <MatDialogTitle>@SpellType.Scan.ToString()</MatDialogTitle>
    <MatDialogContent>
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                @foreach (var spell in OrbitalScans)
                {
                    <div class="mat-layout-grid-cell">
                        <BaseCard Title="@spell.Title" ImageUrl="@spell.Image">
                            <ChildContent>
                                @spell.Description
                            </ChildContent>
                            <Actions>
                                <MatButton OnClick="@(async e => { await SpellChosen(spell); })">Launch</MatButton>
                            </Actions>
                        </BaseCard>
                    </div>
                }
            </div>
        </div>

    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { CloseSpellsDialog.InvokeAsync(); })">Close</MatButton>
    </MatDialogActions>
</MatDialog>
<SpellDialog SpellToLaunch="SelectedOrbitalScan" IsSpellDialogOpen="IsSpellDialogOpen" OnConfigured="@LaunchSpell">

</SpellDialog>


<style>
    .mdc-dialog__container {
        min-width: 90%;
    }

    .mdc-dialog .mdc-dialog__surface {
        max-height: 80%;
        background-color: white;
        max-width: none;
        min-width: 85%;
    }
</style>

@code {
    [Inject]
    private IMatToaster Toaster { get; set; }

    [Parameter]
    public EventCallback<bool> CloseSpellsDialog { get; set; }

    [Parameter]
    public bool IsSpellsDialogOpen { get; set; }

    public bool IsSpellDialogOpen { get; set; }

    [Parameter]
    public int PayloadId { get; set; }

    [Inject]
    private RodinHttpClient OrbitalHttpClient { get; set; }

    OrbitalScan SelectedOrbitalScan { get; set; }

    private readonly List<OrbitalScan> OrbitalScans = new List<OrbitalScan>()
    {

    new OrbitalScan(
    title: "Simple scan",
    endpoint: "Scans",
    description: "Scan a payload with a single antivirus",
    image: "images/simple_scan.png",
    spellType: SpellType.Scan),

    new OrbitalScan(
    title: "Scan all",
    endpoint: "Scans",
    description: "Scan a payload with every supported antiviruses",
    image: "images/offline_virustotal.png",
    spellType: SpellType.Scan,
    isAppliedToAllAntivirus: true),

    new OrbitalScan(
    title: "Dissect",
    endpoint: "Dissect",
    description: "Statically analyse every functions of a payload separatly, and returns which ones are flagged, and which ones are healthy",
    image: "images/dissect.png",
    spellType: SpellType.Scan),

    new OrbitalScan(
    title: "Dissect",
    endpoint: "Dissect",
    description: "Statically analyse every functions of a payload separatly, and returns which ones are flagged, and which ones are healthy",
    image: "images/dissect.png",
    spellType: SpellType.Scan),
    };

    async Task SpellChosen(OrbitalScan orbitalScan)
    {
        SelectedOrbitalScan = orbitalScan;
        if (orbitalScan.IsAppliedToAllAntivirus)
        {
            await LaunchSpell(Enum.GetValues(typeof(SupportedAntivirus)).Cast<SupportedAntivirus>().ToList());
        }
        else
        {
            IsSpellsDialogOpen = true;
        }
    }


    async Task LaunchSpell(List<SupportedAntivirus> antiviruses)
    {
        var OrbitalClient = OrbitalHttpClient.Client;
        HttpResponseMessage response = new();
        var ScanPost = new ScanPost
        {
            PayloadId = PayloadId,
            Antiviruses = antiviruses
        };
        var endpoint = SelectedOrbitalScan.Endpoint;

        @*var test = JsonContent.Create(ScanPost);*@
        try
        {
            response = await OrbitalClient.PostAsync(endpoint, JsonHelper.SerializeAsync(ScanPost));
        }
        catch (Exception ex)
        {
            Toaster.Add(ex.Message, MatToastType.Danger);
        }

        if (!response.IsSuccessStatusCode)
        {
            await OrbitalHttpClient.ShowAndLogError(response);
        }
    }

}
