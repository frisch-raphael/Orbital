@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Options
@using Shared.Config
@using Shared.ControllerResponses.Dtos
@using Shared.Dtos
@using Shared.Enums

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <BaseCard>
                This page does not exist :(
            </BaseCard>
        </LayoutView>
    </NotFound>
</Router>

<style>
    .mat-card-media {
        background-size: contain;
        background-color: white;
    }

    .mat-h6 {
        margin-bottom: 1rem;
        margin-top: 1rem;
    }
</style>

@code
{

    protected override async Task OnInitializedAsync()
    {
        await ConnectToScanNotifications();
    }

    [Inject]
    private IMatToaster Toaster { get; set; }

    [Inject]
    private IOptions<SharedOptions> SharedOptions { get; set; }

    private HubConnection HubConnection { get; set; }

    private async Task ConnectToScanNotifications()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(SharedOptions.Value.orbitalOptions.BaseAddress + "scan_notifications")
            .Build();

        await HubConnection.StartAsync();

        HubConnection.Closed += async (s) =>
        {
            await HubConnection.StartAsync();
        };

        HubConnection.On<ScanResultWSMessage>(Notifications.ScanDone.ToString(), wsMessage =>
        {
            DisplayScanResult(wsMessage);
        });

        HubConnection.On<ScanResultWSMessage>(Notifications.ScanStarted.ToString(), wsMessage =>
        {
            Toaster.Add(
             $"{wsMessage.ScanResult.Antivirus} scan for {wsMessage.Payload.FileName} started.",
             MatToastType.Success, "Scan started");
        });
    }

    private void DisplayScanResult(ScanResultWSMessage wsMessage)
    {
        if (wsMessage.ScanResult.isError)
        {
            DisplayError(wsMessage);
        }
        else if (wsMessage.ScanResult.IsFlagged)
        {
            DisplayHealthyPayload(wsMessage);
        }
        else
        {
            DisplayFlaggedPayload(wsMessage);
        }
    }

    private void DisplayError(ScanResultWSMessage wsMessage)
    {
        Toaster.Add($"{wsMessage.ScanResult.Antivirus} scan for {wsMessage.Payload.FileName} failed.", MatToastType.Danger, "Scan failed");
    }

    private void DisplayHealthyPayload(ScanResultWSMessage wsMessage)
    {
        Toaster.Add(
            $"{wsMessage.ScanResult.Antivirus} reported {wsMessage.Payload.FileName} as flagged. ",
            MatToastType.Danger,
            "Scan finished",
            "close");
    }

    private void DisplayFlaggedPayload(ScanResultWSMessage wsMessage)
    {
        Toaster.Add(
            $"{wsMessage.ScanResult.Antivirus} reported {wsMessage.Payload.FileName} as healthy.",
            MatToastType.Success,
            "Scan finished",
            "check");
    }
}